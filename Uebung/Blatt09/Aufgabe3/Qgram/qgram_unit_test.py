#!/usr/bin/env python3

import unittest, string
from qgram import Qgram

def enumerate_rows_as_lists():
  input_values = '''AGCTTCTAGA	ATTACTCATACTG	1	5
ATTACTCATACTG	AGCTTCTAGA	1	5
AGCTTCTAGA	ATTACTCATACTG	2	11
ATTACTCATACTG	AGCTTCTAGA	2	11
AGCTTCTAGA	ATTACTCATACTG	3	19
ATTACTCATACTG	AGCTTCTAGA	3	19
AGCTTCTAGA	ATTACTCATACTG	4	17
ATTACTCATACTG	AGCTTCTAGA	4	17
AGCTTCTAGA	ACTTACTCATACTACT	1	10
ACTTACTCATACTACT	AGCTTCTAGA	1	10
AGCTTCTAGA	ACTTACTCATACTACT	2	14
ACTTACTCATACTACT	AGCTTCTAGA	2	14
AGCTTCTAGA	ACTTACTCATACTACT	3	18
ACTTACTCATACTACT	AGCTTCTAGA	3	18
AGCTTCTAGA	ACTTACTCATACTACT	4	20
ACTTACTCATACTACT	AGCTTCTAGA	4	20
AGCTTCTAGA	ACTATCCTACTACTA	1	9
ACTATCCTACTACTA	AGCTTCTAGA	1	9
AGCTTCTAGA	ACTATCCTACTACTA	2	15
ACTATCCTACTACTA	AGCTTCTAGA	2	15
AGCTTCTAGA	ACTATCCTACTACTA	3	19
ACTATCCTACTACTA	AGCTTCTAGA	3	19
AGCTTCTAGA	ACTATCCTACTACTA	4	19
ACTATCCTACTACTA	AGCTTCTAGA	4	19
AGCTTCTAGA	ACTCATCTATCACA	1	8
ACTCATCTATCACA	AGCTTCTAGA	1	8
AGCTTCTAGA	ACTCATCTATCACA	2	14
ACTCATCTATCACA	AGCTTCTAGA	2	14
AGCTTCTAGA	ACTCATCTATCACA	3	16
ACTCATCTATCACA	AGCTTCTAGA	3	16
AGCTTCTAGA	ACTCATCTATCACA	4	16
ACTCATCTATCACA	AGCTTCTAGA	4	16
TATATCTATCTACCAGGCATACT	ATTACTCATACTG	1	10
ATTACTCATACTG	TATATCTATCTACCAGGCATACT	1	10
TATATCTATCTACCAGGCATACT	ATTACTCATACTG	2	14
ATTACTCATACTG	TATATCTATCTACCAGGCATACT	2	14
TATATCTATCTACCAGGCATACT	ATTACTCATACTG	3	22
ATTACTCATACTG	TATATCTATCTACCAGGCATACT	3	22
TATATCTATCTACCAGGCATACT	ATTACTCATACTG	4	24
ATTACTCATACTG	TATATCTATCTACCAGGCATACT	4	24
TATATCTATCTACCAGGCATACT	ACTTACTCATACTACT	1	7
ACTTACTCATACTACT	TATATCTATCTACCAGGCATACT	1	7
TATATCTATCTACCAGGCATACT	ACTTACTCATACTACT	2	15
ACTTACTCATACTACT	TATATCTATCTACCAGGCATACT	2	15
TATATCTATCTACCAGGCATACT	ACTTACTCATACTACT	3	23
ACTTACTCATACTACT	TATATCTATCTACCAGGCATACT	3	23
TATATCTATCTACCAGGCATACT	ACTTACTCATACTACT	4	25
ACTTACTCATACTACT	TATATCTATCTACCAGGCATACT	4	25
TATATCTATCTACCAGGCATACT	ACTATCCTACTACTA	1	8
ACTATCCTACTACTA	TATATCTATCTACCAGGCATACT	1	8
TATATCTATCTACCAGGCATACT	ACTATCCTACTACTA	2	12
ACTATCCTACTACTA	TATATCTATCTACCAGGCATACT	2	12
TATATCTATCTACCAGGCATACT	ACTATCCTACTACTA	3	20
ACTATCCTACTACTA	TATATCTATCTACCAGGCATACT	3	20
TATATCTATCTACCAGGCATACT	ACTATCCTACTACTA	4	24
ACTATCCTACTACTA	TATATCTATCTACCAGGCATACT	4	24
TATATCTATCTACCAGGCATACT	ACTCATCTATCACA	1	9
ACTCATCTATCACA	TATATCTATCTACCAGGCATACT	1	9
TATATCTATCTACCAGGCATACT	ACTCATCTATCACA	2	13
ACTCATCTATCACA	TATATCTATCTACCAGGCATACT	2	13
TATATCTATCTACCAGGCATACT	ACTCATCTATCACA	3	19
ACTCATCTATCACA	TATATCTATCTACCAGGCATACT	3	19
TATATCTATCTACCAGGCATACT	ACTCATCTATCACA	4	23
ACTCATCTATCACA	TATATCTATCTACCAGGCATACT	4	23
ATTCATCATCATCTATTCATA	ATTACTCATACTG	1	10
ATTACTCATACTG	ATTCATCATCATCTATTCATA	1	10
ATTCATCATCATCTATTCATA	ATTACTCATACTG	2	16
ATTACTCATACTG	ATTCATCATCATCTATTCATA	2	16
ATTCATCATCATCTATTCATA	ATTACTCATACTG	3	22
ATTACTCATACTG	ATTCATCATCATCTATTCATA	3	22
ATTCATCATCATCTATTCATA	ATTACTCATACTG	4	24
ATTACTCATACTG	ATTCATCATCATCTATTCATA	4	24
ATTCATCATCATCTATTCATA	ACTTACTCATACTACT	1	5
ACTTACTCATACTACT	ATTCATCATCATCTATTCATA	1	5
ATTCATCATCATCTATTCATA	ACTTACTCATACTACT	2	21
ACTTACTCATACTACT	ATTCATCATCATCTATTCATA	2	21
ATTCATCATCATCTATTCATA	ACTTACTCATACTACT	3	25
ACTTACTCATACTACT	ATTCATCATCATCTATTCATA	3	25
ATTCATCATCATCTATTCATA	ACTTACTCATACTACT	4	27
ACTTACTCATACTACT	ATTCATCATCATCTATTCATA	4	27
ATTCATCATCATCTATTCATA	ACTATCCTACTACTA	1	6
ACTATCCTACTACTA	ATTCATCATCATCTATTCATA	1	6
ATTCATCATCATCTATTCATA	ACTATCCTACTACTA	2	24
ACTATCCTACTACTA	ATTCATCATCATCTATTCATA	2	24
ATTCATCATCATCTATTCATA	ACTATCCTACTACTA	3	26
ACTATCCTACTACTA	ATTCATCATCATCTATTCATA	3	26
ATTCATCATCATCTATTCATA	ACTATCCTACTACTA	4	28
ACTATCCTACTACTA	ATTCATCATCATCTATTCATA	4	28
ATTCATCATCATCTATTCATA	ACTCATCTATCACA	1	7
ACTCATCTATCACA	ATTCATCATCATCTATTCATA	1	7
ATTCATCATCATCTATTCATA	ACTCATCTATCACA	2	13
ACTCATCTATCACA	ATTCATCATCATCTATTCATA	2	13
ATTCATCATCATCTATTCATA	ACTCATCTATCACA	3	15
ACTCATCTATCACA	ATTCATCATCATCTATTCATA	3	15
ATTCATCATCATCTATTCATA	ACTCATCTATCACA	4	17
ACTCATCTATCACA	ATTCATCATCATCTATTCATA	4	17
ACTCTATCAGAC	ATTACTCATACTG	1	3
ATTACTCATACTG	ACTCTATCAGAC	1	3
ACTCTATCAGAC	ATTACTCATACTG	2	7
ATTACTCATACTG	ACTCTATCAGAC	2	7
ACTCTATCAGAC	ATTACTCATACTG	3	15
ATTACTCATACTG	ACTCTATCAGAC	3	15
ACTCTATCAGAC	ATTACTCATACTG	4	17
ATTACTCATACTG	ACTCTATCAGAC	4	17
ACTCTATCAGAC	ACTTACTCATACTACT	1	6
ACTTACTCATACTACT	ACTCTATCAGAC	1	6
ACTCTATCAGAC	ACTTACTCATACTACT	2	10
ACTTACTCATACTACT	ACTCTATCAGAC	2	10
ACTCTATCAGAC	ACTTACTCATACTACT	3	16
ACTTACTCATACTACT	ACTCTATCAGAC	3	16
ACTCTATCAGAC	ACTTACTCATACTACT	4	20
ACTTACTCATACTACT	ACTCTATCAGAC	4	20
ACTCTATCAGAC	ACTATCCTACTACTA	1	5
ACTATCCTACTACTA	ACTCTATCAGAC	1	5
ACTCTATCAGAC	ACTATCCTACTACTA	2	11
ACTATCCTACTACTA	ACTCTATCAGAC	2	11
ACTCTATCAGAC	ACTATCCTACTACTA	3	15
ACTATCCTACTACTA	ACTCTATCAGAC	3	15
ACTCTATCAGAC	ACTATCCTACTACTA	4	17
ACTATCCTACTACTA	ACTCTATCAGAC	4	17
ACTCTATCAGAC	ACTCATCTATCACA	1	4
ACTCATCTATCACA	ACTCTATCAGAC	1	4
ACTCTATCAGAC	ACTCATCTATCACA	2	6
ACTCATCTATCACA	ACTCTATCAGAC	2	6
ACTCTATCAGAC	ACTCATCTATCACA	3	8
ACTCATCTATCACA	ACTCTATCAGAC	3	8
ACTCTATCAGAC	ACTCATCTATCACA	4	10
ACTCATCTATCACA	ACTCTATCAGAC	4	10
ACGACGTAG	GGACGTGCAG	2	7
ACGACGTAG	GGACGTGCAG	3	9
ACAACACAA	AAACACACAA	2	1
ACAACACAA	AAACACACAA	3	3'''
  for line in input_values.split('\n'):
    line = line.rstrip()
    yield line.split('\t')

class TestQgramClass(unittest.TestCase):
  def test_qgram_encode(self):
    alphabet = list('ACGT')
    for row_list in enumerate_rows_as_lists():
      seq = '{}{}'.format(row_list[0],row_list[1])
      q = int(row_list[2])
      qgram_object = Qgram(q,alphabet)
      qgram_starts = range(len(seq)-q+1)
      for pos, code in zip(qgram_starts,qgram_object.each_code(seq)):
        code_bf = qgram_object.encode(seq[pos:])
        self.assertEqual(code,code_bf)

  '''def test_qgram_encode_complement(self):
    transtab = str.maketrans('ACGTacgt','TGCAtgca')
    alphabet = list('ACGT')
    for row_list in enumerate_rows_as_lists():
      seq = '{}{}'.format(row_list[0],row_list[1])
      q = int(row_list[2])
      qgram_object = Qgram(q,alphabet)
      qgram_starts = range(len(seq)-q+1)
      for pos, code in zip(qgram_starts,qgram_object.each_code_complement(seq)):
        code_bf = qgram_object.encode_complement(seq[pos:])
        self.assertEqual(code,code_bf)
        this_qgram = seq[pos:pos + q]
        this_qgram_rc = ''.join(reversed(this_qgram.translate(transtab)))
        code_rc_bf = qgram_object.encode(this_qgram_rc)
        self.assertEqual(code,code_rc_bf)'''

  def test_distance(self):
    alphabet = list('ACGT')
    for row_list in enumerate_rows_as_lists():
      q = int(row_list[2])
      qgram_object = Qgram(q,alphabet)
      qgdist = qgram_object.distance(row_list[0],row_list[1])
      self.assertEqual(qgdist,int(row_list[3]))

unittest.main()
